package net.minecraft.world.gen.layer;

import net.minecraft.world.biome.Biome;
import net.minecraft.world.biome.BiomeGenBase;

public class GenLayerBiomeEdge extends GenLayer {

	public GenLayerBiomeEdge(long p_i45475_1_, GenLayer p_i45475_3_) {
		super(p_i45475_1_);
		this.parent = p_i45475_3_;
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 */
	public int[] getInts(int areaX, int areaY, int areaWidth, int areaHeight) {
		int[] aint = this.parent.getInts(areaX - 1, areaY - 1, areaWidth + 2, areaHeight + 2);
		int[] aint1 = IntCache.getIntCache(areaWidth * areaHeight);

		for (int i = 0; i < areaHeight; ++i) {
			for (int j = 0; j < areaWidth; ++j) {
				this.initChunkSeed((long) (j + areaX), (long) (i + areaY));
				int k = aint[j + 1 + (i + 1) * (areaWidth + 2)];

				if (!this.replaceBiomeEdgeIfNecessary(aint, aint1, j, i, areaWidth, k, BiomeGenBase.extremeHills.getLegacyId(), BiomeGenBase.extremeHillsEdge.getLegacyId()) && !this.replaceBiomeEdge(
						aint,
						aint1, j,
						i, areaWidth, k, BiomeGenBase.mesaPlateau_F.getLegacyId(), BiomeGenBase.mesa.getLegacyId()) && !this.replaceBiomeEdge(aint, aint1, j, i, areaWidth, k,
						BiomeGenBase.mesaPlateau.getLegacyId(),
						BiomeGenBase.mesa.getLegacyId()) && !this.replaceBiomeEdge(aint, aint1, j, i, areaWidth, k, BiomeGenBase.megaTaiga.getLegacyId(), BiomeGenBase.taiga.getLegacyId())) {
					if (k == BiomeGenBase.desert.getLegacyId()) {
						int l1 = aint[j + 1 + (i + 1 - 1) * (areaWidth + 2)];
						int i2 = aint[j + 1 + 1 + (i + 1) * (areaWidth + 2)];
						int j2 = aint[j + 1 - 1 + (i + 1) * (areaWidth + 2)];
						int k2 = aint[j + 1 + (i + 1 + 1) * (areaWidth + 2)];

						if (l1 != BiomeGenBase.icePlains.getLegacyId() && i2 != BiomeGenBase.icePlains.getLegacyId() && j2 != BiomeGenBase.icePlains.getLegacyId() && k2 != BiomeGenBase.icePlains.getLegacyId()) {
							aint1[j + i * areaWidth] = k;
						} else {
							aint1[j + i * areaWidth] = BiomeGenBase.extremeHillsPlus.getLegacyId();
						}
					} else if (k == BiomeGenBase.swampland.getLegacyId()) {
						int l = aint[j + 1 + (i + 1 - 1) * (areaWidth + 2)];
						int i1 = aint[j + 1 + 1 + (i + 1) * (areaWidth + 2)];
						int j1 = aint[j + 1 - 1 + (i + 1) * (areaWidth + 2)];
						int k1 = aint[j + 1 + (i + 1 + 1) * (areaWidth + 2)];

						if (l != BiomeGenBase.desert.getLegacyId() && i1 != BiomeGenBase.desert.getLegacyId() && j1 != BiomeGenBase.desert.getLegacyId() && k1 != BiomeGenBase.desert.getLegacyId() && l != BiomeGenBase.coldTaiga.getLegacyId() && i1 != BiomeGenBase.coldTaiga.getLegacyId() && j1 != BiomeGenBase.coldTaiga.getLegacyId() && k1 != BiomeGenBase.coldTaiga.getLegacyId() && l != BiomeGenBase.icePlains.getLegacyId() && i1 != BiomeGenBase.icePlains.getLegacyId() && j1 != BiomeGenBase.icePlains.getLegacyId() && k1 != BiomeGenBase.icePlains.getLegacyId()) {
							if (l != BiomeGenBase.jungle.getLegacyId() && k1 != BiomeGenBase.jungle.getLegacyId() && i1 != BiomeGenBase.jungle.getLegacyId() && j1 != BiomeGenBase.jungle.getLegacyId()) {
								aint1[j + i * areaWidth] = k;
							} else {
								aint1[j + i * areaWidth] = BiomeGenBase.jungleEdge.getLegacyId();
							}
						} else {
							aint1[j + i * areaWidth] = BiomeGenBase.plains.getLegacyId();
						}
					} else {
						aint1[j + i * areaWidth] = k;
					}
				}
			}
		}

		return aint1;
	}

	/**
	 * Creates a border around a biome if necessary, e.g. A transition from hot to cold climates would otherwise occur.
	 */
	private boolean replaceBiomeEdgeIfNecessary(int[] p_151636_1_, int[] p_151636_2_, int p_151636_3_, int p_151636_4_, int p_151636_5_, int p_151636_6_, int p_151636_7_, int p_151636_8_) {
		if (!biomesEqualOrMesaPlateau(p_151636_6_, p_151636_7_)) {
			return false;
		}
		int i = p_151636_1_[p_151636_3_ + 1 + (p_151636_4_ + 1 - 1) * (p_151636_5_ + 2)];
		int j = p_151636_1_[p_151636_3_ + 1 + 1 + (p_151636_4_ + 1) * (p_151636_5_ + 2)];
		int k = p_151636_1_[p_151636_3_ + 1 - 1 + (p_151636_4_ + 1) * (p_151636_5_ + 2)];
		int l = p_151636_1_[p_151636_3_ + 1 + (p_151636_4_ + 1 + 1) * (p_151636_5_ + 2)];

		if (this.canBiomesBeNeighbors(i, p_151636_7_) && this.canBiomesBeNeighbors(j, p_151636_7_) && this.canBiomesBeNeighbors(k, p_151636_7_) && this.canBiomesBeNeighbors(l, p_151636_7_)) {
			p_151636_2_[p_151636_3_ + p_151636_4_ * p_151636_5_] = p_151636_6_;
		} else {
			p_151636_2_[p_151636_3_ + p_151636_4_ * p_151636_5_] = p_151636_8_;
		}

		return true;
	}

	/**
	 * Creates a border around a biome.
	 */
	private boolean replaceBiomeEdge(int[] p_151635_1_, int[] p_151635_2_, int p_151635_3_, int p_151635_4_, int p_151635_5_, int p_151635_6_, int p_151635_7_, int p_151635_8_) {
		if (p_151635_6_ != p_151635_7_) {
			return false;
		}
		int i = p_151635_1_[p_151635_3_ + 1 + (p_151635_4_ + 1 - 1) * (p_151635_5_ + 2)];
		int j = p_151635_1_[p_151635_3_ + 1 + 1 + (p_151635_4_ + 1) * (p_151635_5_ + 2)];
		int k = p_151635_1_[p_151635_3_ + 1 - 1 + (p_151635_4_ + 1) * (p_151635_5_ + 2)];
		int l = p_151635_1_[p_151635_3_ + 1 + (p_151635_4_ + 1 + 1) * (p_151635_5_ + 2)];

		if (biomesEqualOrMesaPlateau(i, p_151635_7_) && biomesEqualOrMesaPlateau(j, p_151635_7_) && biomesEqualOrMesaPlateau(k, p_151635_7_) && biomesEqualOrMesaPlateau(l, p_151635_7_)) {
			p_151635_2_[p_151635_3_ + p_151635_4_ * p_151635_5_] = p_151635_6_;
		} else {
			p_151635_2_[p_151635_3_ + p_151635_4_ * p_151635_5_] = p_151635_8_;
		}

		return true;
	}

	/**
	 * Returns if two biomes can logically be neighbors. If one is hot and the other cold, for example, it returns
	 * false.
	 */
	private boolean canBiomesBeNeighbors(int p_151634_1_, int p_151634_2_) {
		if (biomesEqualOrMesaPlateau(p_151634_1_, p_151634_2_)) {
			return true;
		}
		Biome a = Biome.getBiome(p_151634_1_);
		Biome b = Biome.getBiome(p_151634_2_);

		if (a != null && b != null) {
			BiomeGenBase.TempCategory at = a.getTempCategory();
			BiomeGenBase.TempCategory bt = b.getTempCategory();
			return at == bt || at == BiomeGenBase.TempCategory.MEDIUM || bt == BiomeGenBase.TempCategory.MEDIUM;
		}
		return false;
	}

}
